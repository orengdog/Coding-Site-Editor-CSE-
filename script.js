// –ü–µ—Ä–µ–≤–æ–¥—ã
const translations = {
    ru: {
        title: "–û–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–æ—Ä HTML/CSS/JS",
        subtitle: "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        theme: "–¢—ë–º–Ω–∞—è",
        htmlTab: "HTML",
        cssTab: "CSS",
        jsTab: "JavaScript",
        htmlScratchTab: "HTML –ë–ª–æ–∫–∏",
        cssScratchTab: "CSS –ë–ª–æ–∫–∏",
        jsScratchTab: "JS –ë–ª–æ–∫–∏",
        htmlTitle: "HTML",
        cssTitle: "CSS",
        jsTitle: "JavaScript",
        htmlScratchTitle: "HTML –ë–ª–æ–∫–∏",
        cssScratchTitle: "CSS –ë–ª–æ–∫–∏",
        jsScratchTitle: "JS –ë–ª–æ–∫–∏",
        previewTitle: "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
        runButton: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥",
        resetButton: "–°–±—Ä–æ—Å–∏—Ç—å",
        saveButton: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç ‚ñº",
        saveHtml: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTML",
        saveCss: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSS",
        saveJs: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ JS",
        saveHtmlSb: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ HTMLSB",
        saveCssSb: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ CSSSB",
        saveJsSb: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ JSSB",
        saveAll: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã (ZIP)",
        saveJson: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç (JSON)",
        importTitle: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã",
        importHtml: "–ò–º–ø–æ—Ä—Ç HTML",
        importCss: "–ò–º–ø–æ—Ä—Ç CSS",
        importJs: "–ò–º–ø–æ—Ä—Ç JS",
        importHtmlSb: "–ò–º–ø–æ—Ä—Ç HTMLSB",
        importCssSb: "–ò–º–ø–æ—Ä—Ç CSSSB",
        importJsSb: "–ò–º–ø–æ—Ä—Ç JSSB",
        importJson: "–ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ (JSON)",
        deploymentTitle: "üöÄ –ì–¥–µ –≤—ã–ª–æ–∂–∏—Ç—å —Å–∞–π—Ç?",
        aiHelpTitle: "ü§ñ –£ –∫–æ–≥–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å —Å –∫–æ–¥–æ–º?",
        footer: "–û–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–æ—Ä HTML/CSS/JS &copy; 2025 | ¬©orengdog corporation | –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ü–û",
        htmlPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à HTML –∫–æ–¥ –∑–¥–µ—Å—å...",
        cssPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à CSS –∫–æ–¥ –∑–¥–µ—Å—å...",
        jsPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à JavaScript –∫–æ–¥ –∑–¥–µ—Å—å...",
        resetConfirm: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –∫–æ–¥?",
        projectSaved: "–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'web-project.json'",
        importModalTitle: "–ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞",
        importModalText: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω.",
        confirmImport: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–º–ø–æ—Ä—Ç",
        cancel: "–û—Ç–º–µ–Ω–∞",
        structure: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞",
        text: "–¢–µ–∫—Å—Ç",
        media: "–ú–µ–¥–∏–∞",
        forms: "–§–æ—Ä–º—ã",
        layout: "–ú–∞–∫–µ—Ç",
        navigation: "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        typography: "–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—è",
        colors: "–¶–≤–µ—Ç–∞",
        layoutStyles: "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        effects: "–≠—Ñ—Ñ–µ–∫—Ç—ã",
        animations: "–ê–Ω–∏–º–∞—Ü–∏–∏",
        variables: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
        functions: "–§—É–Ω–∫—Ü–∏–∏",
        events: "–°–æ–±—ã—Ç–∏—è",
        dom: "DOM",
        arrays: "–ú–∞—Å—Å–∏–≤—ã",
        objects: "–û–±—ä–µ–∫—Ç—ã"
    },
    en: {
        title: "Online HTML/CSS/JS Editor",
        subtitle: "Create and test web pages directly in your browser",
        theme: "Dark",
        htmlTab: "HTML",
        cssTab: "CSS",
        jsTab: "JavaScript",
        htmlScratchTab: "HTML Blocks",
        cssScratchTab: "CSS Blocks",
        jsScratchTab: "JS Blocks",
        htmlTitle: "HTML",
        cssTitle: "CSS",
        jsTitle: "JavaScript",
        htmlScratchTitle: "HTML Blocks",
        cssScratchTitle: "CSS Blocks",
        jsScratchTitle: "JS Blocks",
        previewTitle: "Preview",
        runButton: "Run Code",
        resetButton: "Reset",
        saveButton: "Save Project ‚ñº",
        saveHtml: "Save as HTML",
        saveCss: "Save as CSS",
        saveJs: "Save as JS",
        saveHtmlSb: "Save as HTMLSB",
        saveCssSb: "Save as CSSSB",
        saveJsSb: "Save as JSSB",
        saveAll: "Save all files (ZIP)",
        saveJson: "Save project (JSON)",
        importTitle: "Import Files",
        importHtml: "Import HTML",
        importCss: "Import CSS",
        importJs: "Import JS",
        importHtmlSb: "Import HTMLSB",
        importCssSb: "Import CSSSB",
        importJsSb: "Import JSSB",
        importJson: "Import Project (JSON)",
        deploymentTitle: "üöÄ Where to deploy your site?",
        aiHelpTitle: "ü§ñ Who can help with code?",
        footer: "Online HTML/CSS/JS Editor &copy; 2025 | ¬©orengdog corporation | Create web pages without installing additional software",
        htmlPlaceholder: "Enter your HTML code here...",
        cssPlaceholder: "Enter your CSS code here...",
        jsPlaceholder: "Enter your JavaScript code here...",
        resetConfirm: "Are you sure you want to reset all code?",
        projectSaved: "Project saved as 'web-project.json'",
        importModalTitle: "Import File",
        importModalText: "Select file to import. Existing code will be replaced.",
        confirmImport: "Confirm Import",
        cancel: "Cancel",
        structure: "Structure",
        text: "Text",
        media: "Media",
        forms: "Forms",
        layout: "Layout",
        navigation: "Navigation",
        typography: "Typography",
        colors: "Colors",
        layoutStyles: "Layout",
        effects: "Effects",
        animations: "Animations",
        variables: "Variables",
        functions: "Functions",
        events: "Events",
        dom: "DOM",
        arrays: "Arrays",
        objects: "Objects"
    },
    zh: {
        title: "Âú®Á∫ø HTML/CSS/JS ÁºñËæëÂô®",
        subtitle: "Áõ¥Êé•Âú®ÊµèËßàÂô®‰∏≠ÂàõÂª∫ÂíåÊµãËØïÁΩëÈ°µ",
        theme: "Ê∑±Ëâ≤",
        htmlTab: "HTML",
        cssTab: "CSS",
        jsTab: "JavaScript",
        htmlScratchTab: "HTML Âùó",
        cssScratchTab: "CSS Âùó",
        jsScratchTab: "JS Âùó",
        htmlTitle: "HTML",
        cssTitle: "CSS",
        jsTitle: "JavaScript",
        htmlScratchTitle: "HTML Âùó",
        cssScratchTitle: "CSS Âùó",
        jsScratchTitle: "JS Âùó",
        previewTitle: "È¢ÑËßà",
        runButton: "ËøêË°å‰ª£Á†Å",
        resetButton: "ÈáçÁΩÆ",
        saveButton: "‰øùÂ≠òÈ°πÁõÆ ‚ñº",
        saveHtml: "‰øùÂ≠ò‰∏∫ HTML",
        saveCss: "‰øùÂ≠ò‰∏∫ CSS",
        saveJs: "‰øùÂ≠ò‰∏∫ JS",
        saveHtmlSb: "‰øùÂ≠ò‰∏∫ HTMLSB",
        saveCssSb: "‰øùÂ≠ò‰∏∫ CSSSB",
        saveJsSb: "‰øùÂ≠ò‰∏∫ JSSB",
        saveAll: "‰øùÂ≠òÊâÄÊúâÊñá‰ª∂ (ZIP)",
        saveJson: "‰øùÂ≠òÈ°πÁõÆ (JSON)",
        importTitle: "ÂØºÂÖ•Êñá‰ª∂",
        importHtml: "ÂØºÂÖ• HTML",
        importCss: "ÂØºÂÖ• CSS",
        importJs: "ÂØºÂÖ• JS",
        importHtmlSb: "ÂØºÂÖ• HTMLSB",
        importCssSb: "ÂØºÂÖ• CSSSB",
        importJsSb: "ÂØºÂÖ• JSSB",
        importJson: "ÂØºÂÖ•È°πÁõÆ (JSON)",
        deploymentTitle: "üöÄ Âú®Âì™ÈáåÈÉ®ÁΩ≤ÊÇ®ÁöÑÁΩëÁ´ôÔºü",
        aiHelpTitle: "ü§ñ Ë∞ÅËÉΩÂ∏ÆÂä©ÁºñÂÜô‰ª£Á†ÅÔºü",
        footer: "Âú®Á∫ø HTML/CSS/JS ÁºñËæëÂô® &copy; 2025 | ¬©orengdog corporation | Êó†ÈúÄÂÆâË£ÖÈ¢ùÂ§ñËΩØ‰ª∂Âç≥ÂèØÂàõÂª∫ÁΩëÈ°µ",
        htmlPlaceholder: "Âú®Ê≠§ËæìÂÖ•ÊÇ®ÁöÑ HTML ‰ª£Á†Å...",
        cssPlaceholder: "Âú®Ê≠§ËæìÂÖ•ÊÇ®ÁöÑ CSS ‰ª£Á†Å...",
        jsPlaceholder: "Âú®Ê≠§ËæìÂÖ•ÊÇ®ÁöÑ JavaScript ‰ª£Á†Å...",
        resetConfirm: "ÊÇ®Á°ÆÂÆöË¶ÅÈáçÁΩÆÊâÄÊúâ‰ª£Á†ÅÂêóÔºü",
        projectSaved: "È°πÁõÆÂ∑≤‰øùÂ≠ò‰∏∫ 'web-project.json'",
        importModalTitle: "ÂØºÂÖ•Êñá‰ª∂",
        importModalText: "ÈÄâÊã©Ë¶ÅÂØºÂÖ•ÁöÑÊñá‰ª∂„ÄÇÁé∞Êúâ‰ª£Á†ÅÂ∞ÜË¢´ÊõøÊç¢„ÄÇ",
        confirmImport: "Á°ÆËÆ§ÂØºÂÖ•",
        cancel: "ÂèñÊ∂à",
        structure: "ÁªìÊûÑ",
        text: "ÊñáÊú¨",
        media: "Â™í‰Ωì",
        forms: "Ë°®Âçï",
        layout: "Â∏ÉÂ±Ä",
        navigation: "ÂØºËà™",
        typography: "ÊéíÁâà",
        colors: "È¢úËâ≤",
        layoutStyles: "Â∏ÉÂ±Ä",
        effects: "ÊïàÊûú",
        animations: "Âä®Áîª",
        variables: "ÂèòÈáè",
        functions: "ÂáΩÊï∞",
        events: "‰∫ã‰ª∂",
        dom: "DOM",
        arrays: "Êï∞ÁªÑ",
        objects: "ÂØπË±°"
    }
};

// –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const codeExamples = {
    ru: {
        html: `<!DOCTYPE html>
<html>
<head>
    <title>–ú–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</title>
</head>
<body>
    <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–æ—Ä!</h1>
    <p>–ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</p>
    <div id="demo">–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</div>
    <button onclick="changeText()">–ù–∞–∂–º–∏ –º–µ–Ω—è!</button>
</body>
</html>`,
        css: `body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
}

h1 {
    color: #2c3e50;
    text-align: center;
}

p {
    line-height: 1.6;
    color: #34495e;
}

#demo {
    background-color: #3498db;
    color: white;
    padding: 10px;
    border-radius: 5px;
    margin: 15px 0;
    text-align: center;
}

button {
    background-color: #2ecc71;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: block;
    margin: 0 auto;
}

button:hover {
    background-color: #27ae60;
}`,
        js: `function changeText() {
    document.getElementById("demo").innerHTML = "–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é JavaScript!";
    document.getElementById("demo").style.backgroundColor = "#e74c3c";
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    const newElement = document.createElement("p");
    newElement.textContent = "–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏!";
    newElement.style.color = "#27ae60";
    newElement.style.fontWeight = "bold";
    
    document.body.appendChild(newElement);
}`
    },
    en: {
        html: `<!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
</head>
<body>
    <h1>Welcome to the Online Editor!</h1>
    <p>Modify this code and click "Run Code" to see the result.</p>
    <div id="demo">This is demo text</div>
    <button onclick="changeText()">Click me!</button>
</body>
</html>`,
        css: `body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
}

h1 {
    color: #2c3e50;
    text-align: center;
}

p {
    line-height: 1.6;
    color: #34495e;
}

#demo {
    background-color: #3498db;
    color: white;
    padding: 10px;
    border-radius: 5px;
    margin: 15px 0;
    text-align: center;
}

button {
    background-color: #2ecc71;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: block;
    margin: 0 auto;
}

button:hover {
    background-color: #27ae60;
}`,
        js: `function changeText() {
    document.getElementById("demo").innerHTML = "Text changed with JavaScript!";
    document.getElementById("demo").style.backgroundColor = "#e74c3c";
    
    // Create new element
    const newElement = document.createElement("p");
    newElement.textContent = "New element added dynamically!";
    newElement.style.color = "#27ae60";
    newElement.style.fontWeight = "bold";
    
    document.body.appendChild(newElement);
}`
    },
    zh: {
        html: `<!DOCTYPE html>
<html>
<head>
    <title>ÊàëÁöÑÈ°µÈù¢</title>
</head>
<body>
    <h1>Ê¨¢Ëøé‰ΩøÁî®Âú®Á∫øÁºñËæëÂô®ÔºÅ</h1>
    <p>‰øÆÊîπÊ≠§‰ª£Á†ÅÂπ∂ÁÇπÂáª"ËøêË°å‰ª£Á†Å"Êü•ÁúãÁªìÊûú„ÄÇ</p>
    <div id="demo">ËøôÊòØÊºîÁ§∫ÊñáÊú¨</div>
    <button onclick="changeText()">ÁÇπÂáªÊàëÔºÅ</button>
</body>
</html>`,
        css: `body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f5f5f5;
}

h1 {
    color: #2c3e50;
    text-align: center;
}

p {
    line-height: 1.6;
    color: #34495e;
}

#demo {
    background-color: #3498db;
    color: white;
    padding: 10px;
    border-radius: 5px;
    margin: 15px 0;
    text-align: center;
}

button {
    background-color: #2ecc71;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    display: block;
    margin: 0 auto;
}

button:hover {
    background-color: #27ae60;
}`,
        js: `function changeText() {
    document.getElementById("demo").innerHTML = "ÊñáÊú¨Â∑≤ÈÄöËøá JavaScript Êõ¥ÊîπÔºÅ";
    document.getElementById("demo").style.backgroundColor = "#e74c3c";
    
    // ÂàõÂª∫Êñ∞ÂÖÉÁ¥†
    const newElement = document.createElement("p");
    newElement.textContent = "Êñ∞ÂÖÉÁ¥†Â∑≤Âä®ÊÄÅÊ∑ªÂä†ÔºÅ";
    newElement.style.color = "#27ae60";
    newElement.style.fontWeight = "bold";
    
    document.body.appendChild(newElement);
}`
    }
};

// Scratch –±–ª–æ–∫–∏ –¥–ª—è HTML, CSS –∏ JS
const scratchBlocks = {
    html: {
        structure: [
            { title: "HTML5 –î–æ–∫—É–º–µ–Ω—Ç", code: '<!DOCTYPE html>\n<html>\n<head>\n    <title>–ó–∞–≥–æ–ª–æ–≤–æ–∫</title>\n</head>\n<body>\n    \n</body>\n</html>', category: "structure" },
            { title: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä Div", code: '<div class="container">\n    \n</div>', category: "structure" },
            { title: "–°–µ–∫—Ü–∏—è", code: '<section>\n    \n</section>', category: "structure" },
            { title: "–°—Ç–∞—Ç—å—è", code: '<article>\n    \n</article>', category: "structure" },
            { title: "–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å", code: '<aside>\n    \n</aside>', category: "structure" },
            { title: "–®–∞–ø–∫–∞", code: '<header>\n    \n</header>', category: "structure" },
            { title: "–ü–æ–¥–≤–∞–ª", code: '<footer>\n    \n</footer>', category: "structure" }
        ],
        text: [
            { title: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ H1", code: '<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>', category: "text" },
            { title: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ H2", code: '<h2>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</h2>', category: "text" },
            { title: "–ê–±–∑–∞—Ü", code: '<p>–¢–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞</p>', category: "text" },
            { title: "–°—Å—ã–ª–∫–∞", code: '<a href="#">–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏</a>', category: "text" },
            { title: "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç", code: '<strong>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</strong>', category: "text" },
            { title: "–ö—É—Ä—Å–∏–≤", code: '<em>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</em>', category: "text" },
            { title: "–°–ø–∏—Å–æ–∫", code: '<ul>\n    <li>–≠–ª–µ–º–µ–Ω—Ç 1</li>\n    <li>–≠–ª–µ–º–µ–Ω—Ç 2</li>\n</ul>', category: "text" }
        ],
        media: [
            { title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", code: '<img src="image.jpg" alt="–û–ø–∏—Å–∞–Ω–∏–µ">', category: "media" },
            { title: "–í–∏–¥–µ–æ", code: '<video controls>\n    <source src="video.mp4" type="video/mp4">\n</video>', category: "media" },
            { title: "–ê—É–¥–∏–æ", code: '<audio controls>\n    <source src="audio.mp3" type="audio/mp3">\n</audio>', category: "media" },
            { title: "–ò—Ñ—Ä–µ–π–º", code: '<iframe src="https://example.com"></iframe>', category: "media" }
        ],
        forms: [
            { title: "–§–æ—Ä–º–∞", code: '<form>\n    <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç">\n    <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>\n</form>', category: "forms" },
            { title: "–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ", code: '<input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç">', category: "forms" },
            { title: "–ö–Ω–æ–ø–∫–∞", code: '<button>–ö–Ω–æ–ø–∫–∞</button>', category: "forms" },
            { title: "–í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫", code: '<select>\n    <option>–û–ø—Ü–∏—è 1</option>\n    <option>–û–ø—Ü–∏—è 2</option>\n</select>', category: "forms" },
            { title: "–ß–µ–∫–±–æ–∫—Å", code: '<input type="checkbox"> –ß–µ–∫–±–æ–∫—Å', category: "forms" },
            { title: "–†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∞", code: '<input type="radio" name="group"> –û–ø—Ü–∏—è', category: "forms" }
        ],
        layout: [
            { title: "–°–µ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", code: '<div class="grid-container">\n    \n</div>', category: "layout" },
            { title: "–§–ª–µ–∫—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", code: '<div class="flex-container">\n    \n</div>', category: "layout" },
            { title: "–ù–∞–≤–∏–≥–∞—Ü–∏—è", code: '<nav>\n    <ul>\n        <li><a href="#">–°—Å—ã–ª–∫–∞ 1</a></li>\n        <li><a href="#">–°—Å—ã–ª–∫–∞ 2</a></li>\n    </ul>\n</nav>', category: "layout" },
            { title: "–ö–∞—Ä—Ç–æ—á–∫–∞", code: '<div class="card">\n    <h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</h3>\n    <p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏</p>\n</div>', category: "layout" }
        ]
    },
    css: {
        typography: [
            { title: "–°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞", code: 'font-family: Arial, sans-serif;\nfont-size: 16px;\nfont-weight: normal;\nline-height: 1.5;', category: "typography" },
            { title: "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", code: 'text-align: center;', category: "typography" },
            { title: "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", code: 'color: #333333;', category: "typography" },
            { title: "–¢–µ–Ω—å —Ç–µ–∫—Å—Ç–∞", code: 'text-shadow: 2px 2px 4px rgba(0,0,0,0.3);', category: "typography" },
            { title: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞", code: 'text-transform: uppercase;', category: "typography" }
        ],
        colors: [
            { title: "–§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç", code: 'background-color: #ffffff;', category: "colors" },
            { title: "–ì—Ä–∞–¥–∏–µ–Ω—Ç", code: 'background: linear-gradient(45deg, #ff6b6b, #4ecdc4);', category: "colors" },
            { title: "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", code: 'opacity: 0.8;', category: "colors" },
            { title: "–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã", code: 'border-color: #3498db;', category: "colors" }
        ],
        layoutStyles: [
            { title: "Flexbox", code: 'display: flex;\njustify-content: center;\nalign-items: center;', category: "layoutStyles" },
            { title: "Grid", code: 'display: grid;\ngrid-template-columns: 1fr 1fr;\ngap: 20px;', category: "layoutStyles" },
            { title: "–û—Ç—Å—Ç—É–ø—ã", code: 'padding: 20px;\nmargin: 10px;', category: "layoutStyles" },
            { title: "–†–∞–∑–º–µ—Ä—ã", code: 'width: 100%;\nheight: 200px;', category: "layoutStyles" },
            { title: "–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", code: 'position: relative;\ntop: 0;\nleft: 0;', category: "layoutStyles" }
        ],
        effects: [
            { title: "–¢–µ–Ω—å", code: 'box-shadow: 0 4px 8px rgba(0,0,0,0.1);', category: "effects" },
            { title: "–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤", code: 'border-radius: 8px;', category: "effects" },
            { title: "–ì—Ä–∞–Ω–∏—Ü–∞", code: 'border: 1px solid #ddd;', category: "effects" },
            { title: "–†–∞–∑–º—ã—Ç–∏–µ", code: 'filter: blur(2px);', category: "effects" },
            { title: "–Ø—Ä–∫–æ—Å—Ç—å", code: 'filter: brightness(1.2);', category: "effects" }
        ],
        animations: [
            { title: "–ê–Ω–∏–º–∞—Ü–∏—è", code: '@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\nanimation: fadeIn 1s ease-in-out;', category: "animations" },
            { title: "–ü–µ—Ä–µ—Ö–æ–¥", code: 'transition: all 0.3s ease;', category: "animations" },
            { title: "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", code: 'transform: scale(1.1) rotate(5deg);', category: "animations" },
            { title: "–ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è", code: 'transition: transform 0.3s ease;\n}\n.element:hover {\n    transform: scale(1.05);', category: "animations" }
        ]
    },
    js: {
        variables: [
            { title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π", code: 'let variableName = "value";', category: "variables" },
            { title: "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞", code: 'const CONSTANT_NAME = "value";', category: "variables" },
            { title: "–ß–∏—Å–ª–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", code: 'let number = 42;', category: "variables" },
            { title: "–ë—É–ª–µ–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è", code: 'let isActive = true;', category: "variables" },
            { title: "–ú–∞—Å—Å–∏–≤", code: 'let array = [1, 2, 3];', category: "variables" }
        ],
        functions: [
            { title: "–§—É–Ω–∫—Ü–∏—è", code: 'function functionName(parameter) {\n    // –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏\n}', category: "functions" },
            { title: "–°—Ç—Ä–µ–ª–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è", code: 'const functionName = (parameter) => {\n    // –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏\n};', category: "functions" },
            { title: "–ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è", code: 'function() {\n    // –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏\n}', category: "functions" },
            { title: "–§—É–Ω–∫—Ü–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º", code: 'function sum(a, b) {\n    return a + b;\n}', category: "functions" }
        ],
        events: [
            { title: "–ö–ª–∏–∫", code: 'element.addEventListener("click", function() {\n    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞\n});', category: "events" },
            { title: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", code: 'window.addEventListener("load", function() {\n    // –∫–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏\n});', category: "events" },
            { title: "–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞", code: 'inputElement.addEventListener("input", function(event) {\n    console.log(event.target.value);\n});', category: "events" },
            { title: "–ù–∞–≤–µ–¥–µ–Ω–∏–µ –º—ã—à–∏", code: 'element.addEventListener("mouseover", function() {\n    // –∫–æ–¥ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏\n});', category: "events" }
        ],
        dom: [
            { title: "–í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞", code: 'const element = document.querySelector(".className");', category: "dom" },
            { title: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", code: 'element.innerHTML = "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç";', category: "dom" },
            { title: "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è", code: 'element.style.color = "red";', category: "dom" },
            { title: "–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞", code: 'const newElement = document.createElement("div");\ndocument.body.appendChild(newElement);', category: "dom" },
            { title: "–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞", code: 'element.remove();', category: "dom" }
        ],
        arrays: [
            { title: "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞", code: 'const array = [1, 2, 3, 4, 5];', category: "arrays" },
            { title: "–ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞", code: 'array.forEach(item => {\n    console.log(item);\n});', category: "arrays" },
            { title: "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è", code: 'const filtered = array.filter(item => item > 2);', category: "arrays" },
            { title: "–ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ", code: 'const found = array.find(item => item === 3);', category: "arrays" }
        ],
        objects: [
            { title: "–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞", code: 'const obj = {\n    key: "value",\n    number: 42\n};', category: "objects" },
            { title: "–î–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º", code: 'console.log(obj.key);', category: "objects" },
            { title: "–ú–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞", code: 'const obj = {\n    method: function() {\n        // –∫–æ–¥ –º–µ—Ç–æ–¥–∞\n    }\n};', category: "objects" },
            { title: "–ö–ª–∞—Å—Å", code: 'class MyClass {\n    constructor() {\n        // –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä\n    }\n}', category: "objects" }
        ]
    }
};

document.addEventListener('DOMContentLoaded', function() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const htmlCode = document.getElementById('html-code');
    const cssCode = document.getElementById('css-code');
    const jsCode = document.getElementById('js-code');
    const preview = document.getElementById('preview');
    const runButton = document.getElementById('run-button');
    const resetButton = document.getElementById('reset-button');
    const themeToggle = document.getElementById('theme-toggle');
    const themeIcon = document.getElementById('theme-icon');
    const currentLang = document.getElementById('current-lang');
    const langDropdown = document.getElementById('lang-dropdown');
    const saveDropdown = document.getElementById('save-dropdown');
    const tabs = document.querySelectorAll('.tab');
    const codeContainers = document.querySelectorAll('.code-container');
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã Scratch –±–ª–æ–∫–æ–≤
    const htmlBlocksContainer = document.getElementById('html-blocks');
    const cssBlocksContainer = document.getElementById('css-blocks');
    const jsBlocksContainer = document.getElementById('js-blocks');
    const htmlCategoriesContainer = document.getElementById('html-categories');
    const cssCategoriesContainer = document.getElementById('css-categories');
    const jsCategoriesContainer = document.getElementById('js-categories');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞
    const importHtmlBtn = document.getElementById('import-html-file');
    const importCssBtn = document.getElementById('import-css-file');
    const importJsBtn = document.getElementById('import-js-file');
    const importHtmlSbBtn = document.getElementById('import-htmlsb-file');
    const importCssSbBtn = document.getElementById('import-csssb-file');
    const importJsSbBtn = document.getElementById('import-jssb-file');
    const importJsonBtn = document.getElementById('import-json-file');
    const fileInput = document.getElementById('file-input');
    const importModal = document.getElementById('import-modal');
    const confirmImportBtn = document.getElementById('confirm-import');
    const cancelImportBtn = document.getElementById('cancel-import');

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveHtmlBtn = document.getElementById('save-html');
    const saveCssBtn = document.getElementById('save-css');
    const saveJsBtn = document.getElementById('save-js');
    const saveHtmlSbBtn = document.getElementById('save-htmlsb');
    const saveCssSbBtn = document.getElementById('save-csssb');
    const saveJsSbBtn = document.getElementById('save-jssb');
    const saveAllBtn = document.getElementById('save-all');
    const saveJsonBtn = document.getElementById('save-json');

    let currentImportType = '';
    let isLangDropdownOpen = false;
    let isSaveDropdownOpen = false;

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getSystemLanguage() {
        const systemLang = navigator.language || navigator.userLanguage;
        if (systemLang.startsWith('ru')) return 'ru';
        if (systemLang.startsWith('zh')) return 'zh';
        return 'en';
    }
    
    function getSystemTheme() {
        return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }
    
    function setLanguage(lang) {
        document.documentElement.lang = lang;
        currentLang.textContent = lang === 'ru' ? 'üåê RU' : lang === 'zh' ? 'üåê ‰∏≠Êñá' : 'üåê EN';
        
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            if (translations[lang][key]) {
                element.textContent = translations[lang][key];
            }
        });
        
        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            if (translations[lang][key]) {
                element.setAttribute('placeholder', translations[lang][key]);
            }
        });
        
        localStorage.setItem('editor-language', lang);
        
        if (!localStorage.getItem('editor-initialized')) {
            htmlCode.value = codeExamples[lang].html;
            cssCode.value = codeExamples[lang].css;
            jsCode.value = codeExamples[lang].js;
            runCode();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º Scratch –±–ª–æ–∫–∏
        createScratchBlocks();
    }
    
    function setTheme(theme) {
        document.documentElement.setAttribute('data-theme', theme);
        themeIcon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        
        const lang = localStorage.getItem('editor-language') || 'ru';
        const themeText = translations[lang].theme;
        themeToggle.querySelector('span:last-child').textContent = 
            theme === 'dark' ? 
            (themeText === '–¢—ë–º–Ω–∞—è' ? '–°–≤–µ—Ç–ª–∞—è' : themeText === 'Dark' ? 'Light' : 'ÊµÖËâ≤') :
            themeText;
        
        localStorage.setItem('editor-theme', theme);
    }
    
    function runCode() {
        const html = htmlCode.value;
        const css = `<style>${cssCode.value}</style>`;
        const js = `<script>${jsCode.value}<\/script>`;
        
        const fullCode = html.replace('</head>', css + '</head>').replace('</body>', js + '</body>');
        
        preview.contentDocument.open();
        preview.contentDocument.write(fullCode);
        preview.contentDocument.close();
    }
    
    function resetCode() {
        const lang = localStorage.getItem('editor-language') || getSystemLanguage();
        if (confirm(translations[lang].resetConfirm)) {
            htmlCode.value = codeExamples[lang].html;
            cssCode.value = codeExamples[lang].css;
            jsCode.value = codeExamples[lang].js;
            runCode();
        }
    }
    
    function downloadFile(content, fileName, contentType) {
        const blob = new Blob([content], { type: contentType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = fileName;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Scratch –±–ª–æ–∫–æ–≤
    function createScratchBlocks() {
        createBlocksForType('html', htmlBlocksContainer, htmlCategoriesContainer);
        createBlocksForType('css', cssBlocksContainer, cssCategoriesContainer);
        createBlocksForType('js', jsBlocksContainer, jsCategoriesContainer);
    }

    function createBlocksForType(type, blocksContainer, categoriesContainer) {
        const blocks = scratchBlocks[type];
        const lang = localStorage.getItem('editor-language') || 'ru';
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        categoriesContainer.innerHTML = '';
        blocksContainer.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        Object.keys(blocks).forEach(category => {
            const categoryBtn = document.createElement('div');
            categoryBtn.className = 'scratch-category';
            categoryBtn.textContent = translations[lang][category] || category;
            categoryBtn.setAttribute('data-category', category);
            categoriesContainer.appendChild(categoryBtn);
        });

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (categoriesContainer.children.length > 0) {
            categoriesContainer.children[0].classList.add('active');
            showBlocksByCategory(type, Object.keys(blocks)[0], blocksContainer);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categoriesContainer.addEventListener('click', (e) => {
            if (e.target.classList.contains('scratch-category')) {
                Array.from(categoriesContainer.children).forEach(child => {
                    child.classList.remove('active');
                });
                e.target.classList.add('active');
                showBlocksByCategory(type, e.target.getAttribute('data-category'), blocksContainer);
            }
        });
    }

    function showBlocksByCategory(type, category, container) {
        container.innerHTML = '';
        const blocks = scratchBlocks[type][category];
        const lang = localStorage.getItem('editor-language') || 'ru';
        
        blocks.forEach(block => {
            const blockElement = document.createElement('div');
            blockElement.className = 'scratch-block';
            blockElement.setAttribute('data-code', block.code);
            blockElement.innerHTML = `
                <div class="block-title">${block.title}</div>
                <div class="block-code">${block.code}</div>
                <div class="block-category">${translations[lang][block.category] || block.category}</div>
            `;
            
            // Drag and drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            blockElement.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('text/plain', block.code);
                e.dataTransfer.setData('block-type', type);
            });
            
            blockElement.draggable = true;
            
            // –ö–ª–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –≤—Å—Ç–∞–≤–∫–∏
            blockElement.addEventListener('click', () => {
                insertBlockToEditor(type, block.code);
            });
            
            container.appendChild(blockElement);
        });
    }

    function insertBlockToEditor(type, code) {
        let editor;
        switch(type) {
            case 'html': editor = htmlCode; break;
            case 'css': editor = cssCode; break;
            case 'js': editor = jsCode; break;
        }
        
        const startPos = editor.selectionStart;
        const endPos = editor.selectionEnd;
        const currentValue = editor.value;
        
        editor.value = currentValue.substring(0, startPos) + 
                      code + 
                      currentValue.substring(endPos);
        
        editor.selectionStart = editor.selectionEnd = startPos + code.length;
        editor.focus();
        
        runCode();
        
        const activeTab = document.querySelector('.tab.active');
        if (activeTab.getAttribute('data-tab') === type) {
            activeTab.classList.add('block-added');
            setTimeout(() => activeTab.classList.remove('block-added'), 500);
        }
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    function saveHtmlSb() {
        const blocksData = {
            type: 'htmlsb',
            version: '1.0',
            blocks: scratchBlocks.html,
            timestamp: new Date().toISOString()
        };
        downloadFile(JSON.stringify(blocksData, null, 2), 'html-blocks.htmlsb', 'application/json');
    }

    function saveCssSb() {
        const blocksData = {
            type: 'csssb',
            version: '1.0',
            blocks: scratchBlocks.css,
            timestamp: new Date().toISOString()
        };
        downloadFile(JSON.stringify(blocksData, null, 2), 'css-blocks.csssb', 'application/json');
    }

    function saveJsSb() {
        const blocksData = {
            type: 'jssb',
            version: '1.0',
            blocks: scratchBlocks.js,
            timestamp: new Date().toISOString()
        };
        downloadFile(JSON.stringify(blocksData, null, 2), 'js-blocks.jssb', 'application/json');
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    function setupImportHandlers() {
        importHtmlBtn.addEventListener('click', () => openFileInput('html'));
        importCssBtn.addEventListener('click', () => openFileInput('css'));
        importJsBtn.addEventListener('click', () => openFileInput('js'));
        importHtmlSbBtn.addEventListener('click', () => openFileInput('htmlsb'));
        importCssSbBtn.addEventListener('click', () => openFileInput('csssb'));
        importJsSbBtn.addEventListener('click', () => openFileInput('jssb'));
        importJsonBtn.addEventListener('click', () => openFileInput('json'));

        fileInput.addEventListener('change', handleFileImport);
        confirmImportBtn.addEventListener('click', confirmImport);
        cancelImportBtn.addEventListener('click', cancelImport);
    }

    function openFileInput(type) {
        currentImportType = type;
        let accept = '';
        switch(type) {
            case 'html': accept = '.html'; break;
            case 'css': accept = '.css'; break;
            case 'js': accept = '.js'; break;
            case 'htmlsb': accept = '.htmlsb'; break;
            case 'csssb': accept = '.csssb'; break;
            case 'jssb': accept = '.jssb'; break;
            case 'json': accept = '.json'; break;
        }
        fileInput.accept = accept;
        fileInput.click();
    }

    function handleFileImport(event) {
        const file = event.target.files[0];
        if (file) {
            importModal.style.display = 'flex';
        }
    }

    function confirmImport() {
        const file = fileInput.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const content = e.target.result;
                processImportedFile(content, currentImportType);
                importModal.style.display = 'none';
                fileInput.value = '';
            };
            reader.readAsText(file);
        }
    }

    function cancelImport() {
        importModal.style.display = 'none';
        fileInput.value = '';
    }

    function processImportedFile(content, type) {
        const lang = localStorage.getItem('editor-language') || 'ru';
        
        switch(type) {
            case 'html':
                htmlCode.value = content;
                break;
            case 'css':
                cssCode.value = content;
                break;
            case 'js':
                jsCode.value = content;
                break;
            case 'htmlsb':
            case 'csssb':
            case 'jssb':
                try {
                    const blocksData = JSON.parse(content);
                    alert(`–ë–ª–æ–∫–∏ ${type} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!`);
                } catch (e) {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±–ª–æ–∫–æ–≤: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
                }
                break;
            case 'json':
                try {
                    const project = JSON.parse(content);
                    htmlCode.value = project.html || '';
                    cssCode.value = project.css || '';
                    jsCode.value = project.js || '';
                } catch (e) {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON');
                }
                break;
        }
        runCode();
    }

    // Drag and drop –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∫–æ–¥–∞
    function setupDragAndDrop() {
        [htmlCode, cssCode, jsCode].forEach(editor => {
            editor.addEventListener('dragover', (e) => {
                e.preventDefault();
                editor.style.backgroundColor = 'var(--scratch-block-bg)';
            });
            
            editor.addEventListener('dragleave', () => {
                editor.style.backgroundColor = '';
            });
            
            editor.addEventListener('drop', (e) => {
                e.preventDefault();
                editor.style.backgroundColor = '';
                const code = e.dataTransfer.getData('text/plain');
                const blockType = e.dataTransfer.getData('block-type');
                
                if (code) {
                    const startPos = editor.selectionStart;
                    const endPos = editor.selectionEnd;
                    const currentValue = editor.value;
                    
                    editor.value = currentValue.substring(0, startPos) + 
                                  code + 
                                  currentValue.substring(endPos);
                    
                    editor.selectionStart = editor.selectionEnd = startPos + code.length;
                    editor.focus();
                    runCode();
                }
            });
        });
    }

    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    function saveHtml() {
        const htmlContent = htmlCode.value;
        downloadFile(htmlContent, 'index.html', 'text/html');
    }
    
    function saveCss() {
        const cssContent = cssCode.value;
        downloadFile(cssContent, 'styles.css', 'text/css');
    }
    
    function saveJs() {
        const jsContent = jsCode.value;
        downloadFile(jsContent, 'script.js', 'text/javascript');
    }
    
    function saveAllFiles() {
        const zip = new JSZip();
        const lang = localStorage.getItem('editor-language') || 'ru';
        
        zip.file("index.html", htmlCode.value);
        zip.file("styles.css", cssCode.value);
        zip.file("script.js", jsCode.value);
        
        const readmeContent = {
            ru: `# –ú–æ–π –≤–µ–±-–ø—Ä–æ–µ–∫—Ç\n\n–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ –æ–Ω–ª–∞–π–Ω-—Ä–µ–¥–∞–∫—Ç–æ—Ä–µ HTML/CSS/JS.\n\n## –§–∞–π–ª—ã:\n- index.html - –æ—Å–Ω–æ–≤–Ω–æ–π HTML —Ñ–∞–π–ª\n- styles.css - —Å—Ç–∏–ª–∏ CSS\n- script.js - JavaScript –∫–æ–¥\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`,
            en: `# My Web Project\n\nThis project was created in the online HTML/CSS/JS editor.\n\n## Files:\n- index.html - main HTML file\n- styles.css - CSS styles\n- script.js - JavaScript code\n\nJust open index.html in your browser to see the result.`,
            zh: `# ÊàëÁöÑÁΩëÈ°µÈ°πÁõÆ\n\nÊ≠§È°πÁõÆÊòØÂú®Á∫ø HTML/CSS/JS ÁºñËæëÂô®‰∏≠ÂàõÂª∫ÁöÑ„ÄÇ\n\n## Êñá‰ª∂Ôºö\n- index.html - ‰∏ª HTML Êñá‰ª∂\n- styles.css - CSS Ê†∑Âºè\n- script.js - JavaScript ‰ª£Á†Å\n\nÂè™ÈúÄÂú®ÊµèËßàÂô®‰∏≠ÊâìÂºÄ index.html Âç≥ÂèØÊü•ÁúãÁªìÊûú„ÄÇ`
        };
        
        zip.file("README.md", readmeContent[lang]);
        
        zip.generateAsync({type:"blob"}).then(function(content) {
            const url = URL.createObjectURL(content);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'web-project.zip';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });
    }
    
    function saveProject() {
        const lang = localStorage.getItem('editor-language') || 'ru';
        const project = {
            html: htmlCode.value,
            css: cssCode.value,
            js: jsCode.value,
            date: new Date().toISOString(),
            version: "1.0",
            language: lang
        };
        
        const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(project, null, 2));
        const downloadAnchor = document.createElement('a');
        downloadAnchor.setAttribute("href", dataStr);
        downloadAnchor.setAttribute("download", "web-project.json");
        document.body.appendChild(downloadAnchor);
        downloadAnchor.click();
        downloadAnchor.remove();
        
        alert(translations[lang].projectSaved);
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏–º–∏ –º–µ–Ω—é
    function toggleLangDropdown() {
        isLangDropdownOpen = !isLangDropdownOpen;
        if (isLangDropdownOpen) {
            langDropdown.classList.add('dropdown-open');
        } else {
            langDropdown.classList.remove('dropdown-open');
        }
    }
    
    function toggleSaveDropdown() {
        isSaveDropdownOpen = !isSaveDropdownOpen;
        if (isSaveDropdownOpen) {
            saveDropdown.classList.add('dropdown-open');
        } else {
            saveDropdown.classList.remove('dropdown-open');
        }
    }
    
    function closeAllDropdowns(event) {
        if (!langDropdown.contains(event.target)) {
            isLangDropdownOpen = false;
            langDropdown.classList.remove('dropdown-open');
        }
        if (!saveDropdown.contains(event.target)) {
            isSaveDropdownOpen = false;
            saveDropdown.classList.remove('dropdown-open');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
        const savedLang = localStorage.getItem('editor-language');
        const systemLang = getSystemLanguage();
        const lang = savedLang || systemLang;
        setLanguage(lang);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É
        const savedTheme = localStorage.getItem('editor-theme');
        const systemTheme = getSystemTheme();
        const theme = savedTheme || systemTheme;
        setTheme(theme);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        if (localStorage.getItem('editor-initialized')) {
            const savedCode = localStorage.getItem('editor-code');
            if (savedCode) {
                const code = JSON.parse(savedCode);
                htmlCode.value = code.html || codeExamples[lang].html;
                cssCode.value = code.css || codeExamples[lang].css;
                jsCode.value = code.js || codeExamples[lang].js;
            }
        } else {
            htmlCode.value = codeExamples[lang].html;
            cssCode.value = codeExamples[lang].css;
            jsCode.value = codeExamples[lang].js;
            localStorage.setItem('editor-initialized', 'true');
        }
        
        runCode();
        
        // –°–æ–∑–¥–∞–µ–º Scratch –±–ª–æ–∫–∏
        createScratchBlocks();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç
        setupImportHandlers();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º drag and drop
        setupDragAndDrop();
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            const tabId = tab.getAttribute('data-tab');
            
            tabs.forEach(t => t.classList.remove('active'));
            codeContainers.forEach(c => c.classList.remove('active'));
            
            tab.classList.add('active');
            document.getElementById(`${tabId}-container`).classList.add('active');
        });
    });
    
    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        setTheme(currentTheme === 'dark' ? 'light' : 'dark');
    });
    
    document.querySelectorAll('.lang-dropdown-content button').forEach(button => {
        button.addEventListener('click', () => {
            const lang = button.getAttribute('data-lang');
            setLanguage(lang);
            runCode();
            toggleLangDropdown();
        });
    });
    
    document.querySelector('.lang-toggle').addEventListener('click', toggleLangDropdown);
    document.querySelector('.save-btn').addEventListener('click', toggleSaveDropdown);
    document.addEventListener('click', closeAllDropdowns);
    
    [htmlCode, cssCode, jsCode].forEach(textarea => {
        textarea.addEventListener('input', () => {
            const code = {
                html: htmlCode.value,
                css: cssCode.value,
                js: jsCode.value
            };
            localStorage.setItem('editor-code', JSON.stringify(code));
        });
    });
    
    runButton.addEventListener('click', runCode);
    resetButton.addEventListener('click', resetCode);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    saveHtmlBtn.addEventListener('click', saveHtml);
    saveCssBtn.addEventListener('click', saveCss);
    saveJsBtn.addEventListener('click', saveJs);
    saveHtmlSbBtn.addEventListener('click', saveHtmlSb);
    saveCssSbBtn.addEventListener('click', saveCssSb);
    saveJsSbBtn.addEventListener('click', saveJsSb);
    saveAllBtn.addEventListener('click', saveAllFiles);
    saveJsonBtn.addEventListener('click', saveProject);
    
    // –°–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
        if (!localStorage.getItem('editor-theme')) {
            setTheme(e.matches ? 'dark' : 'light');
        }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    init();
});
